configMaps:
  postgres-init-data:
    data:
      init-data.sh: |
        #!/bin/bash
        set -e;
        if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
          psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            CREATE USER "${POSTGRES_NON_ROOT_USER}" WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';
            GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO "${POSTGRES_NON_ROOT_USER}";
        EOSQL
        else
          echo "SETUP INFO: No Environment variables given!"
        fi
    enabled: true
  n8n:
    data:
      N8N_PORT: "5678"
      N8N_RUNNERS_ENABLED: "true"
      N8N_PROTOCOL: http
    enabled: true
controllers:
  main:
    containers:
      main:
        env:
        - value: postgresdb
          name: DB_TYPE
        - value: '{{ .Release.Name }}-postgres'
          name: DB_POSTGRESDB_HOST
        - value: 5432
          name: DB_POSTGRESDB_PORT
        - value: n8n
          name: DB_POSTGRESDB_DATABASE
        - name: DB_POSTGRESDB_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRES_NON_ROOT_USER
              name: postgres-secrets
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_NON_ROOT_PASSWORD
              name: postgres-secrets
        envFrom:
        - configMapRef:
            name: '{{ .Release.Name }}'
        image:
          pullPolicy: IfNotPresent
          tag: 1.114.4
          repository: n8nio/n8n
        probes:
          liveness:
            custom: false
            type: TCP
            spec:
              timeoutSeconds: 1
              initialDelaySeconds: 0
              periodSeconds: 10
              failureThreshold: 3
            enabled: true
          startup:
            custom: false
            type: TCP
            spec:
              timeoutSeconds: 1
              initialDelaySeconds: 0
              periodSeconds: 5
              failureThreshold: 30
            enabled: true
          readiness:
            custom: false
            type: TCP
            spec:
              timeoutSeconds: 1
              initialDelaySeconds: 0
              periodSeconds: 10
              failureThreshold: 3
            enabled: true
        strategy:
          type: Recreate
    type: deployment
    initContainers:
      volume-permissions:
        volumeMounts:
        - name: '{{ .Release.Name }}-data'
          mountPath: /home/node/.n8n
        command:
        - sh
        - -c
        - chown 1000:1000 /home/node/.n8n
        image:
          tag: 1.36
          repository: busybox
    revisionHistoryLimit: 3
    enabled: true
    strategy: Recreate
    replicas: 1
  postgres:
    containers:
      main:
        strategy:
          type: Recreate
        env:
        - value: 5432
          name: POSTGRES_PORT
        - value: postgres-service
          name: POSTGRES_HOST
        - value: n8n
          name: POSTGRES_DB
        image:
          pullPolicy: IfNotPresent
          tag: 17
          repository: postgres
        envFrom:
        - secretRef:
            name: postgres-secrets
    type: deployment
    replicas: 1
    revisionHistoryLimit: 3
    strategy: Recreate
    enabled: true
persistence:
  postgres-init-data:
    advancedMounts:
      postgres:
        main:
        - subPath: init-data.sh
          path: /docker-entrypoint-initdb.d/init-n8n-user.sh
    identifier: postgres-init-data
    type: configMap
    enabled: true
  postgres-secrets:
    name: postgres-secrets
    type: secret
    enabled: true
  data:
    accessMode: ReadWriteMany
    type: persistentVolumeClaim
    storageClass: nfs-client
    size: 2Gi
    enabled: true
    advancedMounts:
      main:
        volume-permissions:
        - path: /home/node/.n8n
        main:
        - path: /home/node/.n8n
  postgres-data:
    accessMode: ReadWriteMany
    type: persistentVolumeClaim
    storageClass: nfs-client
    size: 300Gi
    enabled: true
    advancedMounts:
      postgres:
        main:
        - path: /var/lib/postgresql/data
ingress:
  main:
    hosts:
    - paths:
      - path: /
        service:
          identifier: main
          port: http
        pathType: Prefix
      host: n8n.mattgerega.com
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 500M
      nginx.ingress.kubernetes.io/rewrite-target: /
      kubernetes.io/ingress.class: nginx
    className: nginx
    enabled: true
service:
  main:
    controller: main
    primary: true
    ports:
      http:
        primary: true
        port: 5678
        enabled: true
    type: ClusterIP
  postgres:
    controller: postgres
    primary: false
    ports:
      postgres:
        port: 5432
        enabled: true
    type: ClusterIP

