service:
  main:
    controller: main
    primary: true
    type: ClusterIP
    ports:
      http:
        port: 5678
        enabled: true
        primary: true
  postgres:
    controller: postgres
    primary: false
    type: ClusterIP
    ports:
      postgres:
        port: 5432
        enabled: true

configMaps:
  n8n:
    enabled: true
    data:
      N8N_PROTOCOL: "http"
      N8N_PORT: 5678
  postgres-init-data:
    enabled: true
    data:
      init-data.sh: |-
        #!/bin/bash
        set -e;
        if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
          psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            CREATE USER "${POSTGRES_NON_ROOT_USER}" WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';
            GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO "${POSTGRES_NON_ROOT_USER}";
          EOSQL
        else
          echo "SETUP INFO: No Environment variables given!"
        fi

ingress:
  main:
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 500M
      nginx.ingress.kubernetes.io/rewrite-target: /
      kubernetes.io/ingress.class: nginx
    className: nginx
    enabled: true
    hosts:
      - paths:
          - service:
              port: http
              identifier: main
            pathType: Prefix
            path: /
        host: n8n.mattgerega.com
controllers:
  main:
    revisionHistoryLimit: 3
    enabled: true
    containers:
      main:
        env:

          - name: DB_TYPE
            value: postgresdb
          - name: DB_POSTGRESDB_HOST
            value: "{{ .Release.Name }}-postgres"
          - name: DB_POSTGRESDB_PORT
            value: 5432
          - name: DB_POSTGRESDB_DATABASE
            value: n8n
          - name: DB_POSTGRESDB_USER
            valueFrom:
              secretKeyRef:
                name: postgres-secrets
                key: POSTGRES_NON_ROOT_USER
          - name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secrets
                key: POSTGRES_NON_ROOT_PASSWORD
        envFrom:
          - configMapRef:
              name: "{{ .Release.Name }}-n8n"
        strategy:
          type: Recreate
        probes:
          startup:
            custom: false
            enabled: true
            spec:
              periodSeconds: 5
              failureThreshold: 30
              timeoutSeconds: 1
              initialDelaySeconds: 0
            type: TCP
          liveness:
            custom: false
            enabled: true
            spec:
              periodSeconds: 10
              failureThreshold: 3
              timeoutSeconds: 1
              initialDelaySeconds: 0
            type: TCP
          readiness:
            custom: false
            enabled: true
            spec:
              periodSeconds: 10
              failureThreshold: 3
              timeoutSeconds: 1
              initialDelaySeconds: 0
            type: TCP
        image:
          pullPolicy: IfNotPresent
          repository: n8nio/n8n
          tag: 4.0.9
    strategy: Recreate
    type: deployment
    replicas: 1
    initContainers:
      volume-permissions:
        image: 
          repository: busybox
          tag: 1.36
        command: ["sh", "-c", "chown 1000:1000 /home/node/.n8n"]
        volumeMounts:
          - name: n8ndata
            mountPath: /home/node/.n8n
  postgres:
    revisionHistoryLimit: 3
    enabled: true
    containers:
      main:
        env:
          - name: PGDATA
            value: http
          - name: POSTGRES_PORT
            value: 5432
          - name: POSTGRES_HOST
            value: postgres-service
        envFrom:
        - secretRef:
            name: postgres-secrets
        strategy:
          type: Recreate
        # probes:
        #   startup:
        #     custom: false
        #     enabled: true
        #     spec:
        #       periodSeconds: 5
        #       failureThreshold: 30
        #       timeoutSeconds: 1
        #       initialDelaySeconds: 0
        #     type: TCP
        #   liveness:
        #     custom: false
        #     enabled: true
        #     spec:
        #       periodSeconds: 10
        #       failureThreshold: 3
        #       timeoutSeconds: 1
        #       initialDelaySeconds: 0
        #     type: TCP
        #   readiness:
        #     custom: false
        #     enabled: true
        #     spec:
        #       periodSeconds: 10
        #       failureThreshold: 3
        #       timeoutSeconds: 1
        #       initialDelaySeconds: 0
        #     type: TCP
        image:
          pullPolicy: IfNotPresent
          repository: n8nio/postgres
          tag: 11
    strategy: Recreate
    type: deployment
    replicas: 1
persistence:
  n8n-data:
    size: 2Gi
    enabled: true
    accessMode: ReadWriteMany
    storageClass: nfs-client
    type: persistentVolumeClaim
    advancedMounts:
      main:
        main:
          - path: /home/node/.n8n
  postgres-data:
    size: 300Gi
    enabled: true
    accessMode: ReadWriteMany
    storageClass: nfs-client
    type: persistentVolumeClaim
    advancedMounts:
      postgres:
        main:
          - path: /var/lib/postgresql/data
  postgres-init-data:
    name: postgres-init-data
    enabled: true
    accessMode: ReadOnly
    type: configMap
    advancedMounts:
      postgres:
        main:
          - path: /docker-entrypoint-initdb.d/init-n8n-user.sh
            subPath: init-data.sh
  postgres-secrets:
    name: postgres-secrets
    enabled: true
    type: secret
