environment: production

configMaps:
  redis-config:
    enabled: true
    data:
      redis.conf: |
        # Network
        port 6379
        bind 0.0.0.0
        
        # Authentication - will be overridden by environment variables
        # requirepass will be set via REDISCLI_AUTH environment variable
        # masterauth will be set via REDISCLI_AUTH environment variable
        
        # Persistence
        dir /data
        appendonly yes
        save ""
        
        # Security - disable dangerous commands
        rename-command FLUSHDB ""
        rename-command FLUSHALL ""
        
        # Redis Stack Modules
        loadmodule /opt/redis-stack/lib/redisearch.so MAXSEARCHRESULTS 10000 MAXAGGREGATERESULTS 10000
        loadmodule /opt/redis-stack/lib/redistimeseries.so
        loadmodule /opt/redis-stack/lib/rejson.so
        loadmodule /opt/redis-stack/lib/redisbloom.so

controllers:
  main:
    enabled: true
    type: statefulset
    replicas: 1
    revisionHistoryLimit: 10
    pod:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: "Always"
    initContainers:
      init-permissions:
        image:
          repository: busybox
          tag: 1.36
          pullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /data/appendonlydir
            chown -R 1001:1001 /data
            chmod -R 755 /data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        resources:
          requests:
            memory: 10Mi
            cpu: 10m
          limits:
            memory: 20Mi
            cpu: 20m
    containers:
      main:
        image:
          repository: redis/redis-stack-server
          tag: 7.4.0-v7
          pullPolicy: IfNotPresent
        env:
          TZ: "UTC"
          REDIS_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: redis-secrets
                key: redis-password
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /data/appendonlydir
            exec redis-server /etc/redis/redis.conf \
              --requirepass "$REDIS_PASSWORD" \
              --masterauth "$REDIS_PASSWORD"
        probes:
          liveness:
            enabled: true
            custom: true
            spec:
              initialDelaySeconds: 20
              periodSeconds: 5
              timeoutSeconds: 6
              successThreshold: 1
              failureThreshold: 5
              exec:
                command:
                  - /bin/bash
                  - -c
                  - "redis-cli -h localhost -p 6379 -a $REDIS_PASSWORD ping"
          readiness:
            enabled: true
            custom: true
            spec:
              initialDelaySeconds: 20
              periodSeconds: 5
              timeoutSeconds: 2
              successThreshold: 1
              failureThreshold: 5
              exec:
                command:
                  - /bin/bash
                  - -c
                  - "redis-cli -h localhost -p 6379 -a $REDIS_PASSWORD ping"
          startup:
            enabled: true
            custom: true
            spec:
              initialDelaySeconds: 0
              periodSeconds: 5
              timeoutSeconds: 1
              failureThreshold: 30
              exec:
                command:
                  - /bin/bash
                  - -c
                  - "redis-cli -h localhost -p 6379 -a $REDIS_PASSWORD ping"
        resources:
          requests:
            memory: 100Mi
            cpu: 50m
          limits:
            memory: 200Mi
            cpu: 100m
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false

service:
  main:
    controller: main
    primary: true
    type: ClusterIP
    annotations:
      config.linkerd.io/opaque-ports: "6379"
    ports:
      redis:
        enabled: true
        primary: true
        protocol: TCP
        port: 6379
        targetPort: 6379
  headless:
    controller: main
    enabled: true
    type: ClusterIP
    clusterIP: None
    ports:
      redis:
        enabled: true
        protocol: TCP
        port: 6379
        targetPort: 6379

persistence:
  data:
    enabled: true
    type: persistentVolumeClaim
    storageClass: nfs-client
    accessMode: ReadWriteOnce
    size: 8Gi
    retain: true
    advancedMounts:
      main:
        init-permissions:
          - path: /data
            readOnly: false
        main:
          - path: /data
            readOnly: false
  redis-config:
    enabled: true
    type: configMap
    identifier: redis-config
    advancedMounts:
      main:
        main:
          - path: /etc/redis
            readOnly: true

networkPolicies:
  main:
    enabled: true
    controller: main
    policyTypes:
      - Ingress
      - Egress
    rules:
      ingress:
        - from: []
          ports:
            - protocol: TCP
              port: 6379
        - from: []
          ports:
            - protocol: TCP
              port: 4143
      egress:
        - to: []

serviceAccount:
  create: true
  automount: false
  name: "production-redis-master"

podDisruptionBudget:
  main:
    enabled: true
    controller: main
    maxUnavailable: 1

# NetworkPolicy needs to be added manually as bjw-s common doesn't support it
# We'll create this as a separate template file

