---
# Source: techradar/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: techradar-common
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
data:
  Telemetry__Log__Otlp__Endpoint: https://loki.mattgerega.net/otlp/v1/logs
  Telemetry__Log__Otlp__Headers__X-Scope-OrgID: production
  Telemetry__Metrics__Otlp__Endpoint: https://mimir.mattgerega.net/otlp
  Telemetry__Metrics__Otlp__Headers__X-Scope-OrgID: production
  Telemetry__Trace__Otlp__Endpoint: http://tfx-internal.gerega.net:32326
  Telemetry__Trace__Otlp__Headers__X-Scope-OrgID: production
---
# Source: techradar/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: techradar-data-api
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
data:
  Telemetry__ActivitySourceName: TechRadar.Data.Activity
  Telemetry__MeterName: TechRadar.Data.Meter
  Telemetry__ServiceName: TechRadar.Data
---
# Source: techradar/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: techradar-frontend
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
data:
  Telemetry__ActivitySourceName: TechRadar.Frontend.Activity
  Telemetry__MeterName: TechRadar.Frontend.Meter
  Telemetry__ServiceName: TechRadar.Frontend
---
# Source: techradar/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: techradar-postgres-init-data
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
data:
  init-data.sh: |
    #!/bin/bash
    set -e;
    if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        CREATE USER "${POSTGRES_NON_ROOT_USER}" WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';
        GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO "${POSTGRES_NON_ROOT_USER}";
        ALTER DATABASE ${POSTGRES_DB} OWNER TO "${POSTGRES_NON_ROOT_USER}";
    EOSQL
    else
      echo "SETUP INFO: No Environment variables given!"
    fi
---
# Source: techradar/templates/common.yaml
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: techradar
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "300Gi"
  storageClassName: "nfs-client"
---
# Source: techradar/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: techradar-data-api
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/service: techradar-data-api
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/controller: data-api
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/name: techradar
---
# Source: techradar/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: techradar-frontend
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/service: techradar-frontend
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/controller: frontend
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/name: techradar
---
# Source: techradar/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: techradar-postgres
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/service: techradar-postgres
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/controller: postgres
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/name: techradar
---
# Source: techradar/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: techradar-postgres
  labels:
    app.kubernetes.io/controller: postgres
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/controller: postgres
      app.kubernetes.io/name: techradar
      app.kubernetes.io/instance: techradar
  template:
    metadata:
      annotations: 
        checksum/configMaps: 61f485728c279f52324addf62e059242f1981bfbf6188651e85bdb55bb683a3c
      labels: 
        app.kubernetes.io/controller: postgres
        app.kubernetes.io/instance: techradar
        app.kubernetes.io/name: techradar
    spec: 
      enableServiceLinks: false
      serviceAccountName: default
      automountServiceAccountToken: true
      hostIPC: false
      hostNetwork: false
      hostPID: false
      dnsPolicy: ClusterFirst
      imagePullSecrets: 
        - name: cr-spydersoft-github
      containers: 
        - env:
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_HOST
            value: postgres-service
          - name: POSTGRES_DB
            value: techradar
          envFrom:
          - secretRef:
              name: postgres-secrets
          image: postgres:17
          imagePullPolicy: IfNotPresent
          name: main
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres-data
          - mountPath: /docker-entrypoint-initdb.d/init-techradar-user.sh
            name: postgres-init-data
            subPath: init-data.sh
          - mountPath: /postgres-secrets
            name: postgres-secrets
      volumes: 
        - name: postgres-data
          persistentVolumeClaim:
            claimName: techradar
        - configMap:
            name: techradar-postgres-init-data
          name: postgres-init-data
        - name: postgres-secrets
          secret:
            secretName: postgres-secrets
---
# Source: techradar/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: techradar-data-api
  labels:
    app.kubernetes.io/controller: data-api
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/controller: data-api
      app.kubernetes.io/name: techradar
      app.kubernetes.io/instance: techradar
  template:
    metadata:
      annotations: 
        checksum/configMaps: 61f485728c279f52324addf62e059242f1981bfbf6188651e85bdb55bb683a3c
      labels: 
        app.kubernetes.io/controller: data-api
        app.kubernetes.io/instance: techradar
        app.kubernetes.io/name: techradar
    spec: 
      enableServiceLinks: false
      serviceAccountName: default
      automountServiceAccountToken: true
      hostIPC: false
      hostNetwork: false
      hostPID: false
      dnsPolicy: ClusterFirst
      imagePullSecrets: 
        - name: cr-spydersoft-github
      containers: 
        - env:
          - name: DB_TYPE
            value: postgresdb
          - name: DB_POSTGRESDB_HOST
            value: techradar-postgres
          - name: DB_POSTGRESDB_PORT
            value: "5432"
          - name: DB_POSTGRESDB_DATABASE
            value: techradar
          - name: DB_POSTGRESDB_USER
            valueFrom:
              secretKeyRef:
                key: POSTGRES_NON_ROOT_USER
                name: postgres-secrets
          - name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: POSTGRES_NON_ROOT_PASSWORD
                name: postgres-secrets
          envFrom:
          - secretRef:
              name: techradar-data-api
          - configMapRef:
              name: techradar-common
          - configMapRef:
              name: techradar-data-api
          image: ghcr.io/spydersoft-consulting/techradar-data-api:2.0.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          name: main
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /postgres-secrets
            name: postgres-secrets
      volumes: 
        - name: postgres-secrets
          secret:
            secretName: postgres-secrets
---
# Source: techradar/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: techradar-frontend
  labels:
    app.kubernetes.io/controller: frontend
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  namespace: ra-production-techradar
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/controller: frontend
      app.kubernetes.io/name: techradar
      app.kubernetes.io/instance: techradar
  template:
    metadata:
      annotations: 
        checksum/configMaps: 61f485728c279f52324addf62e059242f1981bfbf6188651e85bdb55bb683a3c
      labels: 
        app.kubernetes.io/controller: frontend
        app.kubernetes.io/instance: techradar
        app.kubernetes.io/name: techradar
    spec: 
      enableServiceLinks: false
      serviceAccountName: default
      automountServiceAccountToken: true
      hostIPC: false
      hostNetwork: false
      hostPID: false
      dnsPolicy: ClusterFirst
      imagePullSecrets: 
        - name: cr-spydersoft-github
      containers: 
        - envFrom:
          - secretRef:
              name: techradar-frontend
          - configMapRef:
              name: techradar-common
          - configMapRef:
              name: techradar-frontend
          image: ghcr.io/spydersoft-consulting/techradar-frontend:2.0.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          name: main
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /postgres-secrets
            name: postgres-secrets
      volumes: 
        - name: postgres-secrets
          secret:
            secretName: postgres-secrets
---
# Source: techradar/templates/common.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: techradar
  labels:
    app.kubernetes.io/instance: techradar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: techradar
    app.kubernetes.io/version: 1.0.9
    helm.sh/chart: techradar-0.1.0
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 500M
    nginx.ingress.kubernetes.io/rewrite-target: /
  namespace: ra-production-techradar
spec:
  ingressClassName: nginx
  rules:
    - host: "techradar.mattgerega.com"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: techradar-frontend
                port:
                  number: 80
